plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

repositories {
    maven {
        url "https://maven.saps.dev/mirror"
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    neoForge {

    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neo_forge}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    def forgeMajor = ((String) rootProject.forge_version).split("-").last().split("\\.").first()
    inputs.properties([
            version: project.version,
            mcversion: rootProject.minecraft_version,
            forgemajor: forgeMajor
    ])

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "mcversion": rootProject.minecraft_version,
                "forgemajor": forgeMajor
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
    setArchiveClassifier(null)
    atAccessWideners.add('dsp.accesswidener')
}

jar {
    setArchiveClassifier("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
}
